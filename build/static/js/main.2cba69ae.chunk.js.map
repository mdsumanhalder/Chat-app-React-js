{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","alert","className","onSubmit","type","value","onChange","target","placeholder","required","align","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","bind","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cba69ae.chunk.js","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nconst projectID = 'e78b179c-71fb-421d-9b09-3929b19b4cd6';\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const authObject = { 'Project-ID': projectID, 'User-Name': username, 'User-Secret': password };\n\n    try {\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n      setError('');\n    } catch (err) {\n      setError( alert('Sorry,wrong username and password'));\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form\">\n        <h1 className=\"title\">Chat App</h1>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\n          <div align=\"center\">\n            <button type=\"submit\" className=\"button\">\n              <span>LogIn</span>\n            </button>\n          </div>\n        </form>\n        <h1>{error}</h1>\n      </div>\n    </div>\n\n  );\n};\n\nexport default LoginForm;\n","const MyMessage = ({ message }) => {\n  if (message.attachments && message.attachments.length > 0) {\n    return (\n      <img\n        src={message.attachments[0].file}\n        alt=\"message-attachment\"\n        className=\"message-image\"\n        style={{ float: 'right' }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\n      {message.text}\n    </div>\n  );\n};\n\nexport default MyMessage;\n","const TheirMessage = ({ lastMessage, message }) => {\n  const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return (\n    <div className=\"message-row\">\n      {isFirstMessageByUser && (\n        <div\n          className=\"message-avatar\"\n          style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\n        />\n      )}\n      {message.attachments && message.attachments.length > 0\n        ? (\n          <img\n            src={message.attachments[0].file}\n            alt=\"message-attachment\"\n            className=\"message-image\"\n            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n          />\n        )\n        : (\n          <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\n            {message.text}\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default TheirMessage;\n","import { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\n\nconst MessageForm = (props) => {\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n\n    isTyping(props, chatId);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const text = value.trim();\n\n    if (text.length > 0) {\n      sendMessage(creds, chatId, { text });\n    }\n\n    setValue('');\n  };\n\n  const handleUpload = (event) => {\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\n  };\n\n  return (\n    <form className=\"message-form\" onSubmit={handleSubmit}>\n      <input\n        className=\"message-input\"\n        placeholder=\"Send a message...\"\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <label htmlFor=\"upload-button\">\n        <span className=\"image-button\">\n          <PictureOutlined className=\"picture-icon\" />\n        </span>\n      </label>\n      <input\n        type=\"file\"\n        multiple={false}\n        id=\"upload-button\"\n        style={{ display: 'none' }}\n        onChange={handleUpload.bind(this)}\n      />\n      <button type=\"submit\" className=\"send-button\">\n        <SendOutlined className=\"send-icon\" />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageForm;\n","import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;","import {ChatEngine} from 'react-chat-engine';\nimport LoginForm from './components/LoginForm'\nimport ChatFeed from './components/ChatFeed';\nimport './App.css'\n\nconst App =()=>{\n    if (!localStorage.getItem('username')) return <LoginForm/>\n    return (\n        <ChatEngine\n        height='100vh' \n        projectID='e78b179c-71fb-421d-9b09-3929b19b4cd6'\n        userName={localStorage.getItem('username')}\n        userSecret={localStorage.getItem('password')}\n        renderChatFeed={(chatAppProps)=> \n            <ChatFeed{...chatAppProps }  />\n            \n        }\n        \n        />\n        \n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}